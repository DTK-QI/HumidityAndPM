@{
    Layout = "~/Views/Shared/_WeatherLayout.cshtml";
}
@section Styles {
    <!-- Bootstrap Table CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.5/dist/bootstrap-table.min.css">
    <style>
        .header {
            background-color: #ADD8E6; /* 淡藍色 */
            padding: 10px;
        }

        .locked-input {
            background-color: #e9ecef; /* 灰色背景 */
            border-color: #ced4da; /* 灰色邊框 */
            cursor: not-allowed; /* 禁止光標 */
        }
    </style>
}
@section Scripts {
    <script src="~/js/bootstrap-table.min.js"></script>
    <script src="~/js/chartjs-adapter-date-fns.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            $(function() {
                async function updateChart(id) {
                    try {
                        // 從 API 獲取資料
                        const response = await fetch('/weather/GetData?label=' + id); // 替換為您的 API
                        const data = await response.json();
                        // 將 API 資料轉換為 Chart.js 格式
                        const formattedData = data.map(item => ({
                            x: new Date(item.time), // 時間
                            y: item.value                // 數值
                        }));
                                    // 將 API 返回的數據轉換為 Bootstrap Table 格式
                        const TableData =  data.map(item => ({
                            id: item.id,
                            time: item.time,
                            value: item.value
                        }));

                        // 更新圖表資料
                        myChart.data.datasets[0].data = formattedData;
                        // 重新渲染圖表
                        myChart.update();

                        $('#tableValue').bootstrapTable('load', TableData);
                        console.log(tableValue);
                        console.log(TabledData);


                    } catch (error) {
                        console.error('無法更新圖表資料', error);
                    }
                }

                $(document).on('click', '.update-row', function() {
                    var id = $(this).data('id');
                    updateRowData(id);
                });

                $(document).on('click', '.delete-row', function() {
                    var id = $(this).data('id');
                    DeleteRowData(id);
                });

                $(document).on('click', '#formSubmitbtn',async  function() {
                    const id = document.getElementById('Formid').value;
                    const newValue = document.getElementById('valueInput').value;
                    try {
                        // 發送 POST 請求到後端
                        const response = await fetch('/weather/updateValue', { // 替換成後端 API 路徑
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                WeatherIndex: id,
                                Value: newValue
                            })
                        });

                        // 檢查後端回應狀態
                         if (!response.ok) {
                             throw new Error(`HTTP 錯誤狀態: ${response.status}`);
                         }

                         const result = await response.json();

                         // 更新圖表並關閉 Modal
                         updateChart(result[0].ValueId);
                         bootstrap.Modal.getInstance(document.getElementById('formModal')).hide();
                        // 顯示成功提示
                        const successAlert = document.getElementById('successAlert');
                        successAlert.classList.remove('d-none');
                        successAlert.classList.add('show');

                        // 三秒後隱藏提示
                        setTimeout(() => {
                            successAlert.classList.remove('show');
                            successAlert.classList.add('d-none');
                        }, 3000);

                    } catch (error) {
                        console.error('更新過程中出錯：', error);
                    }
                });


                async function updateRowData(id)
                {
                    // 從 API 獲取資料
                    const response = await fetch('/weather/GetDataValue?id=' + id); // 替換為您的 API
                    const data = await response.json();
                    // 設置表單欄位的值


                    console.log(data);
                    document.getElementById('Formid').value = data.WeatherIndex;
                    document.getElementById('timeInput').value = data.RecordTime;
                    document.getElementById('valueInput').value = data.Value;

                    formModal.show();
                }

                async function DeleteRowData(id){
                    // 顯示第一次確認對話框
                    const firstConfirm = confirm("確定要刪除這筆資料嗎？");
                    if (!firstConfirm) return; // 如果點擊取消，直接結束動作


                    try {
                        // 發送 DELETE 請求到後端
                        const response = await fetch(`/weather/DeleteDataValue?id=${id}`, { // 替換成您的後端 API 路徑
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        // 檢查後端回應狀態
                        if (!response.ok) {
                            throw new Error(`刪除失敗，HTTP 錯誤狀態: ${response.status}`);
                        }

                        const result = await response.json();

                         // 更新圖表並關閉 Modal
                         updateChart(result[0].ValueId);
                         bootstrap.Modal.getInstance(document.getElementById('formModal')).hide();
                        // 顯示成功提示
                        const DeleteAlert = document.getElementById('DeleteAlert');
                        DeleteAlert.classList.remove('d-none');
                        DeleteAlert.classList.add('show');

                        // 三秒後隱藏提示
                        setTimeout(() => {
                            DeleteAlert.classList.remove('show');
                            DeleteAlert.classList.add('d-none');
                        }, 3000);
                    } catch (error) {
                        console.error('更新過程中出錯：', error);
                    }

                }

                var ctx = document.getElementById('myChart').getContext('2d');
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [{
                            label: '數值隨時間變化',
                            data: [], // 初始化為空，稍後填充
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'time', // X 軸使用時間格式
                                time: {
                                    unit: 'hour', // 顯示格式單位（例如：秒、分鐘、天）
                                    displayFormats: {
                                        minute: 'HH:mm:ss' // 格式化顯示為時分秒
                                    }
                                },
                                title: {
                                    display: true,
                                    text: '時間'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: '數值'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            },
                            tooltip: {
                                enabled: true,
                                mode: 'index'
                            }
                        }
                    }
                });
                const formModal = new bootstrap.Modal(document.getElementById('formModal'));
                // 初始化表格
                var tableValue = $('#tableValue').bootstrapTable({
                    columns: [{
                            field: 'id',
                            title: 'ID',
                            sortable: true
                        },{
                            field: 'time',
                            title: '時間',
                            sortable: true
                        }, {
                            field: 'value',
                            title: '數值',
                            sortable: true
                        }, {
                            field: 'function',
                            title: '功能',
                            formatter: function(value, row, index) {
                                return `
                                    <button class="btn btn-warning btn-sm update-row" data-id="${row.id}">編輯</button>
                                    <button class="btn btn-danger btn-sm delete-row" data-id="${row.id}">刪除</button>
                                `;
                            }
                        }
                    ],
                    data: [] // 初始空數據
                });



                // 初次加載時更新圖表
                updateChart(33);
                // 定時每 1 分鐘更新一次圖表
                var intervalId = setInterval(updateChart, 60000); // 每 60 秒執行一次


                // 偵測 select 元素的變化並取得 value
                document.getElementById('labelSelect').addEventListener('change', function() {
                    var selectedValue = this.value;
                    console.log('Selected value:', selectedValue);
                    // 清除之前的排程
                    clearInterval(intervalId);
                    updateChart(selectedValue); // 更新圖表
                    intervalId = setInterval(updateChart, 60000); // 每 60 秒執行一次
                });
            });
        });
        
    </script>
}

<div class="text-center"><h3>各類數值</h3></div>
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-center text-center">
            <div class="w-75 border">
                <select id="labelSelect" class="form-select" aria-label="Default select example">
                  <option selected value="33">PM2.5</option>
                  <option value="14">溫度</option>
                  <option value="38">濕度</option>
                    <option value="144">小時風向值</option>
                    <option value="143">小時風速值</option>
                    <option value="23">雨量</option>
                    <option value="17">大氣壓力</option>
                    <option value="11">風向</option>
                    <option value="10">風速</option>
                    <option value="7">二氧化氮</option>
                    <option value="6">一氧化氮</option>
                    <option value="5">氮氧化物</option>
                    <option value="3">臭氧</option>
                    <option value="2">一氧化碳</option>
                    <option value="1">二氧化硫</option>
                </select>
            </div>
            @* <button class="btn btn-primary">新增</button> *@
        </div>
    </div>
    <div class="col-12">
        <canvas id="myChart" width="400" height="200"></canvas>
    </div>
    <div class="col-12">
        <div class="alert alert-success alert-dismissible fade show d-none" role="alert" id="successAlert">
            更新成功！
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class="alert alert-danger alert-dismissible fade show d-none" role="alert" id="DeleteAlert">
            刪除成功！
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <table id="tableValue"
               class="table table-striped"
               
               data-search="true"
               data-pagination="true"
               data-sortable="true">
            <thead>
                <tr>
                    <th data-field="id">ID</th>
                    <th data-field="time" data-sortable="true">時間</th>
                    <th data-field="value" data-sortable="true">數值</th>
                    <th data-field="function">功能</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<!-- Modal 結構 -->
<div class="modal fade" id="formModal" tabindex="-1" aria-labelledby="formModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="formModalLabel">數值變更</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 表單內容 -->
                <form id="dataForm">
                    <!-- Id -->
                    <div class="mb-3">
                        <input type="text" class="form-control locked-input d-none" id="Formid" readonly>
                    </div>
                    <!-- Time 欄位（不可編輯） -->
                    <div class="mb-3">
                        <label for="timeInput" class="form-label">Time</label>
                        <input type="text" class="form-control locked-input" id="timeInput" readonly>
                    </div>
                    <!-- Value 欄位 -->
                    <div class="mb-3">
                        <label for="valueInput" class="form-label">Value</label>
                        <input type="number" class="form-control" id="valueInput" placeholder="請輸入數值">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                <button type="button" class="btn btn-primary" id="formSubmitbtn">提交</button>
            </div>
        </div>
    </div>
</div>
